# This workflow will build and test a Swift iOS project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: macos-15  # macOS 15 (Sequoia) with Xcode 16+
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'  # Use latest stable Xcode on runner
    
    - name: Show Xcode and Swift version
      run: |
        xcodebuild -version
        swift --version
        
    - name: List available simulators
      run: xcrun simctl list devices available | grep iPhone

    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Resolve SPM dependencies
      run: |
        xcodebuild -resolvePackageDependencies \
          -project ShoppingApp.xcodeproj \
          -scheme ShoppingApp

    - name: Build project
      run: |
        xcodebuild clean build \
          -project ShoppingApp.xcodeproj \
          -scheme ShoppingApp \
          -destination 'platform=iOS Simulator,name=Any iPhone' \
          -configuration Debug \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO

    - name: Run unit tests
      run: |
        xcodebuild test \
          -project ShoppingApp.xcodeproj \
          -scheme ShoppingApp \
          -destination 'platform=iOS Simulator,name=Any iPhone' \
          -derivedDataPath DerivedData \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: DerivedData/Logs/Test/*.xcresult
        if-no-files-found: warn

    - name: Generate code coverage report
      if: success()
      run: |
        xcrun xccov view --report --json DerivedData/Logs/Test/*.xcresult > coverage.json
        echo "Code coverage report generated"

    - name: Upload code coverage
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage
        path: coverage.json
